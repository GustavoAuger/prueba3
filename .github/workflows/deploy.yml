name: Pipeline Completo

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  terraform:
    name: Configuración con Terraform
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código
      - name: Checkout del código
        uses: actions/checkout@v3

      # 2. Configurar AWS credentials para S3
      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      # 3. Configurar Terraform
      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # 4. Inicializar Terraform
      - name: Inicializar Terraform
        run: terraform init

      # 5. Planificar los cambios
      - name: Planificar cambios con Terraform
        run: terraform plan

      # 6. Aplicar cambios automáticamente
      - name: Aplicar cambios con Terraform
        run: terraform apply -auto-approve

      # 7. Obtener la IP pública de la EC2
      - name: Obtener la IP pública de la EC2
        id: ec2_ip
        run: |
          # Extraer la IP pública de Terraform y limpiar caracteres no deseados
          IP=$(terraform output -raw ec2_public_ip | tr -d '\r\n')
          if [[ -z "$IP" ]]; then
            echo "Error: No se pudo obtener la dirección IP pública de Terraform."
            exit 1
          fi
          echo "EC2_PUBLIC_IP=$IP" >> $GITHUB_ENV

  despliegue-EC2:
    name: Desplegar en EC2
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout del código
        uses: actions/checkout@v3

      - name: Configurar clave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

      - name: Instalar dependencias en la instancia EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.EC2_PUBLIC_IP }} "
            sudo apt update && sudo apt upgrade -y && \
            sudo apt install -y python3 python3-venv python3-pip git
          " 

      - name: Clonar o actualizar el repositorio
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.EC2_PUBLIC_IP }} "
            if [ ! -d /home/${{ secrets.EC2_USER }}/app ]; then
              git clone https://github.com/GustavoAuger/prueba3 /home/${{ secrets.EC2_USER }}/app;
            else
              cd /home/${{ secrets.EC2_USER }}/app && git pull;
            fi
          "

      - name: Crear entorno virtual e instalar dependencias
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.EC2_PUBLIC_IP }} "
            cd /home/${{ secrets.EC2_USER }}/app/api && \
            python3 -m venv venv && \
            source venv/bin/activate && \
            python3 -m pip install --upgrade pip && \
            python3 -m pip install --no-cache-dir -r requirements.txt --break-system-packages
          "

      - name: Verificar existencia de app.py
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.EC2_PUBLIC_IP }} "
            ls /home/${{ secrets.EC2_USER }}/app/api/app.py
          "

      - name: Reiniciar la aplicación
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.EC2_PUBLIC_IP }} "
            cd /home/${{ secrets.EC2_USER }}/app/api && \
            source venv/bin/activate && \
            nohup python3 app.py > app.log 2>&1 &
          "

  ecr-push:
    name: Cargar imagen a ECR
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      # 1. Checkout del código fuente
      - name: Checkout del código
        uses: actions/checkout@v4

      # 2. Configurar credenciales de AWS
      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Configurar Docker Buildx
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Cachear capas de Docker para acelerar builds futuros
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-latest
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 5. Iniciar sesión en Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6. Construir imagen Docker
      - name: Construir imagen Docker
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO }}:latest .

      # 7. Subir imagen a Amazon ECR
      - name: Subir imagen a Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO }}:latest
