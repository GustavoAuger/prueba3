name: Pipeline Completo

on:
  push:
    branches:
      - master

jobs:

  scan-terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install snyk
        run: npm install -g snyk

      - name: Authenticate Snyk CLI
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Scan IaC code 
        run: snyk iac test terraform/** --severity-threshold=high

  terraform:
    name: Configuración con Terraform
    runs-on: ubuntu-latest
    needs: scan-terraform

    steps:
      # 1. Checkout del código
      - name: Checkout del código
        uses: actions/checkout@v3

      # 2. Configurar AWS credentials para S3
      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      # 3. Configurar Terraform
      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # 4. Inicializar Terraform/Plan/Apply
      - name: Aplicar cambios terraform
        run: |
          cd terraform/build_ec2
          terraform init
          terraform plan
          terraform apply -auto-approve

  despliegue-EC2:
    name: Desplegar en EC2
    runs-on: ubuntu-latest 
    needs: terraform  

    steps:
      # 1. Hacer checkout del código del repositorio
      - name: Checkout del código
        uses: actions/checkout@v3  

      # 2. Obtener la dirección IP pública de la EC2
      - name: Obtener dirección IP pública de EC2
        id: obtener_ip_ec2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}  
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}  
          AWS_REGION: ${{ secrets.AWS_REGION }}  
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --region $AWS_REGION --filters "Name=tag:Name,Values=ec2-prueba3" \
            --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      # 3. Configurar la clave SSH para la conexión con la EC2
      - name: Configurar clave SSH
        run: |
          mkdir -p ~/.ssh  # Crea el directorio ~/.ssh si no existe.
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa  # Guarda la clave privada SSH en el archivo id_rsa.
          chmod 400 ~/.ssh/id_rsa  # Cambia los permisos del archivo de la clave para hacerlo seguro.

      # 4. Instalar dependencias en la instancia EC2
      - name: Instalar dependencias en la instancia EC2
        run: |
          # Conecta a la EC2 usando SSH y ejecuta los comandos para instalar dependencias
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.PUBLIC_IP }} "
            sudo apt update && sudo apt upgrade -y && \  # Actualiza el sistema.
            sudo apt install -y python3 python3-venv python3-pip git  # Instala dependencias necesarias.
          " 

      # 5. Clonar o actualizar el repositorio en la instancia EC2
      - name: Clonar o actualizar el repositorio
        run: |
          # Conecta a la EC2 y clona el repositorio o actualiza el repositorio existente
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.PUBLIC_IP }} "
            if [ ! -d /home/${{ secrets.EC2_USER }}/app ]; then  # Si no existe la carpeta app
              git clone https://github.com/GustavoAuger/prueba3 /home/${{ secrets.EC2_USER }}/app;  # Clona el repositorio.
            else
              cd /home/${{ secrets.EC2_USER }}/app && git pull;  # Si ya existe, actualiza el repositorio.
            fi
          "

      # 6. Crear entorno virtual e instalar dependencias de Python
      - name: Crear entorno virtual e instalar dependencias
        run: |
          # Conecta a la EC2, crea un entorno virtual y instala las dependencias de Python
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.PUBLIC_IP }} "
            cd /home/${{ secrets.EC2_USER }}/app/api && \
            python3 -m venv venv && \  # Crea un entorno virtual llamado 'venv'.
            source venv/bin/activate && \  # Activa el entorno virtual.
            python3 -m pip install --upgrade pip && \  # Actualiza pip.
            python3 -m pip install --no-cache-dir -r requirements.txt --break-system-packages  # Instala dependencias de Python.
          "

      # 7. Verificar existencia de app.py en la instancia EC2
      - name: Verificar existencia de app.py
        run: |
          # Conecta a la EC2 y verifica que el archivo 'app.py' exista en el directorio especificado
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.PUBLIC_IP }} "
            ls /home/${{ secrets.EC2_USER }}/app/api/app.py  # Muestra el archivo si existe.
          "

      # 8. Reiniciar la aplicación en la EC2
      - name: Reiniciar la aplicación
        run: |
          # Conecta a la EC2 y reinicia la aplicación en segundo plano
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.PUBLIC_IP }} "
            cd /home/${{ secrets.EC2_USER }}/app/api && \
            source venv/bin/activate && \  # Activa el entorno virtual.
            nohup python3 app.py > app.log 2>&1 &  # Ejecuta la aplicación en segundo plano y guarda los logs.
          "


  ecr-push:
    name: Cargar imagen a ECR
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      # 1. Checkout del código fuente
      - name: Checkout del código
        uses: actions/checkout@v4

      # 2. Configurar credenciales de AWS
      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Configurar Docker Buildx
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Cachear capas de Docker para acelerar builds futuros
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-latest
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 5. Iniciar sesión en Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6. Construir imagen Docker
      - name: Construir imagen Docker
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO }}:latest .

      # 7. Escanear imagen 

      - name: Escanear imagen Docker
        run: |
          snyk container test ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO }}:latest --severity-threshold=high
      
      # 8. Subir imagen a Amazon ECR    

      - name: Subir imagen a Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO }}:latest

      # 9. Escanear imagen a Amazon ECR  

      - name: Escanear repositorio en ECR
        run: |
          aws ecr start-image-scan \
            --repository-name ${{ secrets.ECR_REPO }} \
            --image-id imageTag=latest

