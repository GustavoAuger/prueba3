name: Pipeline Completo

on:
  push:
    branches:
      - master2
  pull_request:
    branches:
      - master2

jobs:
  terraform:
    name: Configuración con Terraform
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del código
      - name: Checkout del código
        uses: actions/checkout@v3

      # 2. Configurar AWS credentials para S3
      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      # 3. Configurar Terraform
      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # 4. Inicializar Terraform
      - name: Inicializar Terraform
        run: terraform init

      # 5. Planificar los cambios
      - name: Planificar cambios con Terraform
        run: terraform plan

      # 6. Aplicar cambios automáticamente
      - name: Aplicar cambios con Terraform
        run: terraform apply -auto-approve


  despliegue-EC2:
    name: Desplegar en EC2
    runs-on: ubuntu-latest 
    needs: terraform  

    steps:
      # 1. Hacer checkout del código del repositorio
      - name: Checkout del código
        uses: actions/checkout@v3  

      # 2. Obtener la dirección IP pública de la EC2
      - name: Obtener dirección IP pública de EC2
        id: obtener_ip_ec2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}  
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}  
          AWS_REGION: ${{ secrets.AWS_REGION }}  
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --region $AWS_REGION --filters "Name=tag:Name,Values=ec2-prueba3" \
            --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      # 3. Configurar la clave SSH para la conexión con la EC2
      - name: Configurar clave SSH
        run: |
          mkdir -p ~/.ssh  # Crea el directorio ~/.ssh si no existe.
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa  # Guarda la clave privada SSH en el archivo id_rsa.
          chmod 400 ~/.ssh/id_rsa  # Cambia los permisos del archivo de la clave para hacerlo seguro.


  ecr-push:
    name: Cargar imagen a ECR
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      # 1. Checkout del código fuente
      - name: Checkout del código
        uses: actions/checkout@v4

      # 2. Configurar credenciales de AWS
      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Configurar Docker Buildx
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Cachear capas de Docker para acelerar builds futuros
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-latest
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 5. Iniciar sesión en Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6. Construir imagen Docker
      - name: Construir imagen Docker
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO }}:latest .

      # 7. Subir imagen a Amazon ECR
      - name: Subir imagen a Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO }}:latest
